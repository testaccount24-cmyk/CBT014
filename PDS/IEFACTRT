IEFACTRT TITLE 'SMF JOB/STEP TERMINATION EXIT ROUTINE     '
***********************************************************************
*                                                                     *
*             MODULE NAME = IEFACTRT                                  *
*                                                                     *
*             DESCRIPTIVE NAME =  SMF EXIT ROUTINE TO PRINT JOB       *
*                STATS IN JCL LOG AT END OF STEP AND JOB              *
*                                                                     *
*             COPYRIGHT = NONE                                        *
*                                                                     *
*                                                                     *
*              NOTES =                                                *
*                                                                     *
*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *
*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *
*                                                                     *
*                 RESTRICTIONS = NONE                                 *
*                                                                     *
*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *
*                    REGISTERS 0 TO 1  = PARAMETER REGISTERS ON ENTRY *
*                    REGISTERS 2 TO 5  = UNUSED                       *
*                    REGISTER  6       = OUTPUT LINE REGISTER         *
*                    REGISTER  7       = COMMON PARAMETER AREA        *
*                    REGISTERS 8 TO 10 = UNUSED                       *
*                    REGISTER  11      = BASE REGISTER FOR CSECT      *
*                    REGISTER  12      = POINTER TO IEFYS INTERFACE   *
*                                        PARMS(PASSED UPON ENTRY)     *
*                    REGISTER  13      = ADDRESSIBILITY TO SAVEAREA   *
*                    REGISTERS 14,15   = WORK REGISTERS               *
*                                                                     *
*        R0 AND R1 WORK REGISTERS                                     *
*        R2    WORK                                                   *
*        R3    WORK                                                   *
*        R4    WORK                                                   *
*        R5    WORK                                                   *
*        R6    PRINTLINE BASE REG                                     *
*        R7    LINK                                                   *
*        R8    WORKAREA BASE REG                                      *
*        R9    SMF RECORD BASE REG                                    *
*        R10   PARMLIST POINTER                                       *
*        R12   SECOND BASE                                            *
*        R13   SPECIAL WORK                                           *
*        R15   SMF RECORD SUB SEGMENT BASE                            *
*              AND ENTRY POINT ADDRESS TO IEFYS                       *
*                                                                     *
*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *
*                   BINARY ZEROES)                                    *
*                                                                     *
*             MODULE TYPE = PROCEDURE                                 *
*                                                                     *
*                PROCESSOR = ASM                                      *
*                                                                     *
*                MODULE SIZE =                                        *
*                                                                     *
*                ATTRIBUTES = KEY 0, REENTRANT,                       *
*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *
*                                                                     *
*             ENTRY POINTS = IEFACTRT (ONLY ENTRY POINT)              *
*                                                                     *
*                LINKAGE =                                            *
*                                                                     *
*                                                                     *
*             INPUT = REG1 POINTS TO LIST OF FULLWORD ADDRESSES       *
*                     AS FOLLOWS.                                     *
*                 1.  PTR TO COMMON EXIT PARAMETER AREA               *
*                 2.  PTR TO STEPNAME FIELD                           *
*                 3.  PTR TO PROGRAMMER NAME FIELD                    *
*                 4.  PTR TO JOB CPU TIME FIELD                       *
*                 5.  PTR TO JOB ACCOUNTING FIELDS                    *
*                 6.  PTR TO STEP CPU TIME FIELD                      *
*                 7.  PTR TO STEP ACCOUNTING FIELDS                   *
*                 8.  PTR TO CANCEL FLAG & STEP NUMBER                *
*                 9.  PTR TO CONDITION CODE FIELD                     *
*                10.  PTR TO SMF RECORD TO BE WRITTEN                 *
*                                                                     *
*             OUTPUT = NONE                                           *
*                                                                     *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *
*                                                                     *
*                OUTPUT = NONE                                        *
*                                                                     *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*             EXIT - ERROR = NONE                                     *
*                                                                     *
*                OUTPUT = NONE                                        *
*                                                                     *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*             EXTERNAL REFERENCES =                                   *
*                                                                     *
*                ROUTINES = NONE                                      *
*                                                                     *
*                DATA AREAS = NONE                                    *
*                                                                     *
*                CONTROL BLOCKS = NONE                                *
*                                                                     *
*             TABLES = NONE                                           *
*                                                                     *
*             MACROS = SAVE, RETURN, GETMAIN, FREEMAIN,               *
*                      IFASMFR, IEFJMR,                               *
*                                                                     *
*             CHANGE ACTIVITY = NONE                                  *
*                                                                     *
*             MESSAGES =                                              *
*                STEP TERMINATION LINE AND JOB TERMINATION LINE.      *
*                                                                     *
*             ABEND CODES = NONE                                      *
*                                                                     *
***********************************************************************
         TITLE 'IEFACTRT HOUSEKEEPING'
IEFACTRT CSECT
IEFACTRT AMODE 31
IEFACTRT RMODE ANY
         SAVE  (14,12)
         USING IEFACTRT,R11,R12    SET UP CSECT ADDRESSABILITY
         LR    R11,R15             LOAD BASE REGISTER
         SPACE 2
***********************************************************************
*                                                                     *
*        DETERMINE REASON FOR ENTRY  CODE 20 CONTINUE                 *
*                                    CODE 12, 16, 24 EXIT             *
*                                                                     *
***********************************************************************
         SPACE 2
         LR    R9,R0              SAVE R0 FOR LATER USAGE
         C     R0,=F'20'           NOT INTERESTED IN CODES OTHER THAN
         BE    CONTINUE            20
         C     R0,=F'00123456'    ANNA'A SPECIAL TEST GARBAGE ?
         BNE   RETURN             NO, GO ON HOME
CONTINUE LR    R10,R1              SAVE PARM LIST ADDRESS
         SPACE 2
***********************************************************************
*                                                                     *
*GET STORAGE FOR WORK AREA AND SAVE REGS                              *
*                                                                     *
***********************************************************************
         SPACE 2
         GETMAIN R,LV=WORKEND-WORKSTRT   STORAGE FOR WORKAREA DSECT
         LR    R8,R1               SAVE GETMAINED STORE ADDRESS
         USING WORKAREA,R8         ESTABLISH ADDRESSABILITY TO IT
         LR    R1,R13              SAVE OS SAVEAREA
         LA    R13,SAVEAREA        LOAD ADDRESS OF OUT SAVEAREA
         ST    R13,8(R1)           SAVE OUR SAVEAREA IN OS LSA
         ST    R1,4(R13)           SAVE OS SAVEAREA IN OUR HSA
         ST    R12,R12SAVE         SAVE PARMS ADDRESS
         ST    R9,R0SAVE           SAVE R0
         LA    R12,4095(R11)       ESTABLISH SECOND ABSE
         LA    R12,1(R12)
         USING PARMS,R10           SET UP ADDRESSABILITY TO PARM LIST
         L     R9,PARMRECD         LOAD ADDRESS OF SMF RECORD
         CLC   R0SAVE,=F'00123456' TEST MODE?
         BNE   STEPJOB             NO, DON'T DO OPEN
         MVC   SYSPRINT(SYSPRTED-SYSPRTDC),SYSPRTDC  SET UP DCB IN WORK
         MVC   OPENL(OPENLDCE-OPENLDC),OPENLDC        SET UP OPEN LIST
         OPEN  (SYSPRINT,(OUTPUT)),MF=(E,OPENL)    USED FOR TESTING
         SPACE 4
***********************************************************************
*                                                                     *
*        DETERMINE IF JOB TERMINATION OR STEP TERMINATION             *
*                                                                     *
***********************************************************************
         SPACE 2
         USING SMFRCD30,R9         ESTABLISH ADDRESSABILITY TO RECORD
STEPJOB  CLI   SMF30SON+1,X'01'    CHECK IF SSSEGMENT IS THERE
         BL    EXIT1               NO - EXIT
         LR    R15,R9               GET RECORD ADDRESS
         A     R15,SMF30SOF         POINT TO SS SEGMENT
         USING SMF30PSS,R15         ESTABLISH ADDRESSABILITY
         CLC   SMF30TYP,R30JOB     WAS IT JOB TERMINATION
         BE    JOBEND              YES
         CLC   SMF30TYP,R30STEP    WAS IT STEP TERMINATION
         BE    STEPEND             YES
         B     EXIT1               NO - EXIT
         DROP  R15
         TITLE 'STEP END PROCESSING'
***********************************************************************
*    STEP END PROCESSING                                              *
***********************************************************************
         SPACE 2
STEPEND  EQU   *
         L     R1,16              CVT POINTER
         L     R1,0(,R1)          GET TCB POINTER
         L     R1,4(,R1)          GET CURRENT TCB ADDRESS
         L     R1,180(,R1)        GET ADDRESS OF JSCB
         L     R1,260(,R1)        GET JCT PREFIX ADDRESS
*        TM    23(R1),X'80'       MSGLEVEL=(,1)
*        BNO   EXIT1                NO EXIT  MSGLEVEL=(,0)
         MVC   WTOANP02(WTO02END-WTOSTC02),WTOSTC02
         MVI   PRTLINE,C' '        SET UP CLEAR
         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE
         BAS   R7,PUTLINE          BLANK LINE
         MVC   PRTLINE,BASELINE    SET UP ROW OF *'S
         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE
         LA    R1,PRTLINE+46       LOAD ADDRESS FOR HEADER GEN
         BAS   R7,HDRSETP          GO SET UP HEADER
CKUSER1  BAS   R7,PUTLINE                           AND GO PRINT IT
         MVC   PRTLINE,BASELINE                     SET UP A SEPARATOR
         BAS   R7,PUTLINE                           LINE AND PRINT
         SPACE 2
***********************************************************************
* BUILD AND PRINT HEADER FOR STEP END:                                *
*                                                                     *
*  OS/MVS    STATISTICS FOR STEP 001 - STEPNAME    STEP COND CODE XX  *
***********************************************************************
         SPACE 2
         LA    R6,PRTLINE          SET BASE FOR PRTLINE DSECT
         USING SH1,R6
         MVC   SHEAD1(L'USERID),USERID       MOVE USER IDENTIFICATION
         L     R15,16               GET CVT POINTER
         LA    R7,24                RELOCATION FACTOR
         SR    R15,R7
         CLC   0(8,R15),BINZERO     CHECK FOR ZEROS
         BE    *+10
         MVC   SHEAD1A(16),0(R15)            USER SYSTEM DESC.
         MVC   SHEAD11A(L'IPSTEP),IPSTEP     STEP END  CONSTANT
         CLI   SMF30ION+1,X'01'        IDENTIFICATION SEGMENT PRESENT
         BL    STEP1                   NO BYPASS INFORMATION
         LR    R15,R9                        SMF RECORD ADDRESS
         A     R15,SMF30IOF              IDENTIFICATION SEGMENT OFFSET
         USING SMF30ID,R15              ESTABLISH ADDRESSABILITY
         SR    R2,R2                         GET STEP NUMBER
         IC    R2,SMF30STN+1                  INTO R3
         CVD   R2,TEMP                       TO EBCDIC
         MVC   SHEAD11A+L'IPSTEP(4),=X'40202120'
         ED    SHEAD11A+L'IPSTEP(4),TEMP+6
         MVC   ANP02ST#,SHEAD11A+L'IPSTEP    MOVE INTO WTO MESSAGE
         MVI   SHEAD11A+L'IPSTEP+5,C'-'
         MVC   SHEAD11A+L'IPSTEP+7(8),SMF30STM  MOVE STEP NAME
         MVC   ANP02JBN,SMF30JBN             MOVE INTO WTO MESSAGE
         MVC   ANP02STN,SMF30STM             MOVE INTO WTO MESSAGE
         MVC   STEPCL,CONDLINE
         DROP  R15
STEP1    EQU   *
         CLI   SMF30TON+1,X'01'    COMPLETION SEGMENT PRESENT
         BL    PRTCOND              NO BYPASS INFORMATION
         LR    R15,R9                     SMF RECORD ADDRESS
         A     R15,SMF30TOF            COMPLETION SEGMENT OFFSET
         USING SMF30CMP,R15           ESTABLISH ADDRESSABILITY
         TM    SMF30STI,X'01'       WAS STEP FLUSHED ?
         BZ    CONNORM             NO,CONDITION NORMAL
         MVC   STEPFLSH(11),=C'WAS FLUSHED'  CONDITION ABNORMAL
         B     PRTCOND
CONNORM  EQU   *
         CLC   SMF30SCC(2),X'0000'  CONDITION CODE ZERO ?
         BNE   CONNZERO
         MVC   STEPCOND,=C'0000'   CONDITION NORMAL
         B     PRTCOND
CONNZERO TM    SMF30STI,X'02'       ABEND ??
         BO    CONABEND            YES
         LH    R2,SMF30SCC          NO, HANDLE STEP COMPLETION CODES
         CVD   R2,TEMP             *
         MVC   STEPCOND-1(6),=X'402020212020'
         ED    STEPCOND-1(6),TEMP+5
         B     PRTCOND
         SPACE 1
CONABEND MVC   STEPFLSH(7),=C'ABEND ('
         TM    SMF30SCC,X'80'       USER ABEND ??
         BZ    SYSABEND            NO SYSTEM ABEND
         MVC   STEPFLSH+7(6),=C'USER) '
         MVC   ANP02UAT,=C'USER  '
         LH    R2,SMF30SCC
         N     R2,=A(X'FFF')       TURN OFF FLAGS
         CVD   R2,TEMP
         MVC   STEPFLSH+13(6),=X'402120202020'
         ED    STEPFLSH+13(6),TEMP+5
         MVC   ANP02UAB,STEPFLSH+13
         CLI   SMF30ION+1,X'01'     IS ID SECTION PRESENT?
         BL    PRTCOND              NO, SKIP MESSAGE
         LR    R15,R9
         A     R15,SMF30IOF
         USING SMF30ID,R15
         CLI   SMF30CLS,C' '        IS THIS A BATCH JOB?
         BE    PRTCOND              NO, SKIP PRINTING MESSAGE
         DROP  R15
         LA    R1,WTOANP02          ISSUE ANP002I MESSAGE
         WTO   MF=(E,(1))
         B     PRTCOND
         SPACE 1
SYSABEND DS    0H
         USING SMF30CMP,R15           ESTABLISH ADDRESSABILITY
         UNPK  TEMP(5),SMF30SCC(3)  DISPLAY SYSTEM CODE IN HEX
         MVC   STEPFLSH+7(8),=C'SYSTEM) '
         MVC   ANP02SAT,=C'SYSTEM'
         TR    TEMP+1(3),TOHEX-C'0'
         MVC   STEPFLSH+15(3),TEMP+1
         MVC   ANP02SAB,STEPFLSH+15
         MVC   ANP02SBL,=C'   '
         CLI   SMF30ION+1,X'01'     IS ID SECTION PRESENT?
         BL    PRTCOND              NO, SKIP MESSAGE
         LR    R15,R9
         A     R15,SMF30IOF
         USING SMF30ID,R15
         CLI   SMF30CLS,C' '        IS THIS A BATCH JOB?
         BE    PRTCOND              NO, SKIP PRINTING MESSAGE
         DROP  R15
         LA    R1,WTOANP02
         WTO   MF=(E,(1))
         SPACE 1
PRTCOND  BAS   R7,PUTLINE          GO PRINT 1ST LINE
         MVC   PRTLINE,BASELINE              PREPARE SPACER
         BAS   R7,PUTLINE                    AND PRINT
         SPACE 2
***********************************************************************
*  FIRST STEP REPORT LINE                                             *
***********************************************************************
         SPACE 2
         MVC   PRTLINE,STEPLN1     1ST INFO LINE
         CLI   SMF30ION+1,X'01'       IDENTIFICATION SEGMENT PRESENT
         BL    FRSTLNE                  NO BYPASS INFORMATION
         LR    R15,R9                         SMF RECORD ADDRESS
         A     R15,SMF30IOF              IDENTIFICATION SEGMENT OFFSET
         USING SMF30ID,R15              ESTABLISH ADDRESSABILITY
         MVC   SLN1P(,R6),SMF30PGM  PGM NAME
         MVC   TIME,SMF30SIT        STEP INIT TIME
         LA    R5,SLN1I(R6)        SET UP PARAMETERS
         BAL   R7,TIMEX
         DROP  R15
FRSTLNE  EQU   *
         CLI   SMF30CON+1,X'01'    PROCESSOR ACCOUNTING SEGMENT PRESENT
         BL    FRSTLNE0              NO BYPASS INFORMATION
         LR    R15,R9                         SMF RECORD ADDRESS
         A     R15,SMF30COF        PROCESSOR ACCOUNTING SEGMENT OFFSET
         USING SMF30CAS,R15              ESTABLISH ADDRESSABILITY
         L     R2,SMF30CPT         GET STEP CPU TIME
         ST    R2,TIME              CPU TIME
         LA    R5,SLN1TC(R6)       *
         BAL   R7,TIMEX1           *
         DROP  R15
FRSTLNE0 CLI   SMF30PON+1,X'01'    PERFORMANCE SEGMENT PRESENT
         BL    FRSTLNE1              NO BYPASS INFORMATION
         LR    R15,R9              GET SMF RECORD ADDRESS
         A     R15,SMF30POF        PERFORMANCE SEGMENT OFFSET
         USING SMF30PRF,R15        ESTABLISH ADDRESSABILITY
         L     R1,SMF30SRV           TOTAL SERVICE
         BAS   R14,PCOUNT
         MVC   SLN1TOTS(5,R6),TEMP+3
         L     R1,SMF30CSU         CPU SERVICE
         BAS   R14,PCOUNT
         MVC   SLN1TCS(5,R6),TEMP+3
         DROP  R15
FRSTLNE1 BAS   R7,PUTLINE          GO PRINT STEP STATS -- LINE 1
         SPACE 2
***********************************************************************
* BUILD AND PRINT 2ND LINE                                            *
***********************************************************************
         SPACE 2
         MVC   PRTLINE,STEPLN2
         BAL   R7,GETTIME           GET CURRENT TIME FOR STEP END
         L     R0,TIMEND            GET TIME GOTTEN INTO
         ST    R0,TIME              TIME FOR CALL
         LA    R5,SLN2END(R6)      *
         BAL   R7,TIMEX            *
         CLI   SMF30RON+1,X'01'     STORAGE AND PAGING SEGMENT PRESENT
         BL    SECDLNE              NO BYPASS INFORMATION
         LR    R15,R9                         SMF RECORD ADDRESS
         A     R15,SMF30ROF          STORAGE AND PAGING SEGMENT OFFSET
         USING SMF30SAP,R15              ESTABLISH ADDRESSABILITY
         L     R1,SMF30URB         * PRIVATE STOR BELOW 16 M
         BAS   R14,HCOUNT
         MVC   SLN2PRBL(6,R6),TEMP+2
         L     R1,SMF30EUR         * PRIVATE STOR ABOVE 16 M
         BAS   R14,HCOUNT
         MVC   SLN2PRAB(6,R6),TEMP+2
         L     R1,SMF30NSW          TOTAL SWAPS
         BAS   R14,PCOUNT
         MVC   SLN2SWAP(5,R6),TEMP+3
         DROP  R15
SECDLNE  EQU   *
         CLI   SMF30CON+1,X'01'    PROCESSOR ACCOUNTING SEGMENT PRESENT
         BL    SECDLNE1              NO BYPASS INFORMATION
         LR    R15,R9                         SMF RECORD ADDRESS
         A     R15,SMF30COF        PROCESSOR ACCOUNTING SEGMENT OFFSET
         USING SMF30CAS,R15              ESTABLISH ADDRESSABILITY
         L     R2,SMF30CPS          SRB CPU TIME
         ST    R2,TIME
         LA    R5,SLN2SRBC(R6)
         BAL   R7,TIMEX1           *
         DROP  R15
SECDLNE1 EQU   *
         CLI   SMF30PON+1,X'01'      PERFORMANCE SEGMENT PRESENT
         BL    SECDLNE2               NO BYPASS INFORMATION
         LR    R15,R9                         SMF RECORD ADDRESS
         A     R15,SMF30POF          PERFORMANCE SEGMENT OFFSET
         USING SMF30PRF,R15              ESTABLISH ADDRESSABILITY
         L     R1,SMF30SRB          SRB SERVICE
         BAS   R14,PCOUNT
         MVC   SLN2SRBS(5,R6),TEMP+3
         DROP  R15
SECDLNE2 BAS   R7,PUTLINE
         SPACE 2
***********************************************************************
* BUILD AND PRINT 3RD LINE                                            *
***********************************************************************
         SPACE 2
         MVC   PRTLINE,STEPLN3
         CLI   SMF30RON+1,X'01'     STORAGE AND PAGING SEGMENT PRESENT
         BL    THRDLNE              NO BYPASS INFORMATION
         LR    R15,R9                         SMF RECORD ADDRESS
         A     R15,SMF30ROF          STORAGE AND PAGING SEGMENT OFFSET
         USING SMF30SAP,R15              ESTABLISH ADDRESSABILITY
         L     R1,SMF30ARB         * LSQA/SWA STOR BELOW 16 M
         BAS   R14,HCOUNT
         MVC   SLN3SPBL(6,R6),TEMP+2
         L     R1,SMF30EAR         * LSQA/SWA STOR ABOVE 16 M
         BAS   R14,HCOUNT
         MVC   SLN3SPAB(6,R6),TEMP+2
         L     R1,SMF30PSC+4       PAGE SECONDS (MILLSECS)
         BAS   R14,PCOUNT
         MVC   SLN3PS(8,R6),TEMP
         L     R1,SMF30PSI          SWAP PAGES IN
         BAS   R14,PCOUNT
         MVC   SLN3SPI(5,R6),TEMP+3
         DROP  R15
THRDLNE  CLI   SMF30PON+1,X'01'    PERFORMANCE SEGMENT PRESENT
         BL    THRDLNE1            NO BYPASS INFORMATION
         LR    R15,R9              GET SMF RECORD ADDRESS
         A     R15,SMF30POF        PERFORMANCE SEGMENT OFFSET
         USING SMF30PRF,R15        ESTABLISH ADDRESSABILITY
         MVC   TIME,SMF30TAT        STEP ACTIVE TIME
         LA    R5,SLN3AT(R6)       SET UP PARAMETERS
         BAL   R7,TIMEX2
         L     R1,SMF30IO          I/O SERVICE
         BAS   R14,PCOUNT
         MVC   SLN3IOS(5,R6),TEMP+3
         DROP  R15
THRDLNE1 EQU   *
         BAS   R7,PUTLINE          GO PRINT 3RD LINE
         SPACE 2
***********************************************************************
* BUILD AND PRINT 4TH LINE                                            *
***********************************************************************
         SPACE 2
         MVC   PRTLINE,STEPLN4
         CLI   SMF30RON+1,X'01'    STORAGE AND PAGING SEGMENT PRESENT
         BL    FRTHLNE             NO  BYPASS INFORMATION
         LR    R15,R9              GET SMF RECORD ADDRESS
         A     R15,SMF30ROF        STORAGE AND PAGING SEGMENT OFFSET
         USING SMF30SAP,R15        ESTABLISH ADDRESSABILITY
         L     R1,SMF30RGN          REGION SIZE
         SLA   R1,10               ADJUST REGION TO BYTES
         BAS   R14,HCOUNT
         MVC   SLN4RG(6,R6),TEMP+2
         L     R1,SMF30PST         PAGES STOLEN
         BAS   R14,PCOUNT
         MVC   SLN4PS(8,R6),TEMP
         L     R1,SMF30PSO          SWAP PAGES OUT
         BAS   R14,PCOUNT
         MVC   SLN4SPO(5,R6),TEMP+3
         DROP  R15
FRTHLNE  EQU   *
         CLI   SMF30PON+1,X'01'    PERFORMANCE SEGMENT PRESENT
         BL    FRTHLNE1            NO  BYPASS INFORMATION
         LR    R15,R9              GET SMF RECORD ADDRESS
         A     R15,SMF30POF        PERFORMANCE SEGMENT OFFSET
         USING SMF30PRF,R15        ESTABLISH ADDRESSABILITY
         MVC   TIME,SMF30RES       STEP RESIDENCY TIME
         LA    R5,SLN4RT(R6)       SET UP PARAMETERS
         BAL   R7,TIMEX2
         L     R1,SMF30MSO          MSO SERVICE
         BAS   R14,PCOUNT
         MVC   SLN4MSO(5,R6),TEMP+3
         DROP  R15
FRTHLNE1 BAS   R7,PUTLINE          GO PRINT 4TH LINE
         SPACE  2
***********************************************************************
* BUILD INTERMEDIATE HEADER FOR I/O EXCP COUNTS                       *
***********************************************************************
         SPACE 2
         MVC   PRTLINE,BASELINE    SET SPACERS
         BAS   R7,PUTLINE          PUT OUT
         SPACE 1
         CLI   SMF30TON+1,X'01'    COMPLETION SEGMENT PRESENT
         BL    EXCP1              NO  BYPASS INFORMATION
         LR    R15,R9              GET SMF RECORD ADDRESS
         A     R15,SMF30TOF        COMPLETION SEGMENT OFFSET
         USING SMF30CMP,R15        ESTABLISH ADDRESSABILITY
         TM    SMF30STI,X'01'       WAS STEP FLUSHED ?
         BO    EXIT                YES. NO EXCP-S
         DROP  R15
         SPACE 1
         USING SH2,R6              SET BASE
EXCP1    EQU   *
         MVC   SHEAD2,EXCPSTAT        GET HEADING IN THERE
         BAS   R7,PUTLINE             AND PRINT IT
         MVC   PRTLINE,BASELINE       PRINT SEPARATOR
         BAS   R7,PUTLINE             LINE
         MVI   SUPSW,X'00'            INITIALIZE SUPPRESSION SWITCH
         SPACE 3
***********************************************************************
* CONSTRUCT I/O EXCP COUNTS (7  ENTRIES PER LINE)                     *
***********************************************************************
         SPACE 2
         CLI   SMF30EON+1,X'01'    EXCP SEGMENT PRESENT
         BL    CNTDONE             NO BYPASS INFORMATION
         LR    R15,R9              GET SMF RECORD ADDRESS
         A     R15,SMF30EOF        EXCP SEGMENT OFFSET
         USING SMF30EXP,R15        ESTABLISH ADDRESSABILITY
         LH    R4,SMF30EON         NUMBER OF EXCP SEGMENTS
         LA    R2,SMF30DEV          GET START OF ENTRIES
         MVC   DDNSVE,=CL8'        '  INITIALIZE WORK AREA
         MVC   CONCATNO,=F'0'         INITIALIZE WORK AREA
         DROP  R15
         USING SMF30DEV,R2        ESTABLISH ADDRESSABILITY
         CLC   SMF30DDN,=C'ALLZERO '  IS THIS DDNAME FIRST ONE
         BNE   *+8                    NO
         MVI   SUPSW,X'01'            YES  RESET SUPPRESSION SWITCH
LOOP1    EQU   *
         LA    R5,7                ONLY 7  ENTRIES PER LINE
         LA    R6,PRTLINE+4        GET ADDR OF 1ST COUNT AREA
         MVC   PRTLINE,BASELINE
LOOP2    EQU   *
         BAL   R7,EXCP             GET ENTRIES INTO PRINT LINE
         CLC   SMF30BLK,BINZERO    THIS ENTRY ZERO
         BNE   LOOP2A               NO
         CLI   SUPSW,X'00'         SUPPRESS SWITCH ON
         BNE   LOOP2A              NO
         AH    R2,SMF30ELN         STEP UP TO NEXT ENTRY
         BCT   R4,LOOP2
         B     LOOP4
LOOP2A   AH    R2,SMF30ELN         STEP UP TO NEXT ENTRY
         LA    R6,17(R6)           NEXT POSITION IN PRINT LINE
         BCT   R4,*+8              BR AROUND EXIT TIL DONE
         B     LOOP3               EXIT WHEN R4 IS ZERO
         BCT   R5,LOOP2            DO ENTRIES UNTIL 7  IS REACHED
         LR    R5,R2               SAVE R2 FROM PUTLINE
         BAS   R7,PUTLINE          PUT OUT THIS ONE
         LR    R2,R5               RESTORE R2
         B     LOOP1               GO START ANOTHER LINE
LOOP3    BCT   R5,LOOP4            ACCOUNT FOR LAST ENTRY
         LR    R5,R2               SAVE R2 FROM PUTLINE
         BAS   R7,PUTLINE          PUT OUT THIS ONE
         LR    R2,R5               RESTORE R2
         LA    R5,7                ONLY 7  ENTRIES PER LINE
         LA    R6,PRTLINE+4        GET ADDR OF 1ST COUNT AREA
         MVC   PRTLINE,BASELINE
         B     LOOP4               GO START ANOTHER LINE
         SPACE 2
***********************************************************************
*  CONVERT AND PLACE UNIT ADDRESS AND EXCP COUNTS IN PRINT LINE       *
***********************************************************************
         SPACE 2
EXCP     EQU   *
         USING S4,R6
         MVC   TEMP(4),SMF30BLK    GET I/O EXCP COUNT
         L     R3,TEMP                AND CONVERT IT
         CVD   R3,TEMP                   TO DECIMAL
         MVC   SCOUNT-1(8),=X'4020202020202120'
         ED    SCOUNT-1(8),TEMP+4
         CLC   SMF30DDN,DDNSVE         SAME DDNAME
         BE    EXCP01                  YES IT IS A CONCATENATION
         MVC   DDNSVE,SMF30DDN
         MVC   SDDNME,SMF30DDN
         SR    R3,R3
         ST    R3,CONCATNO
         B     EXCP02
EXCP01   EQU   *
         L     R3,CONCATNO           GET NUMBER OF CONCATENTATION
         A     R3,=F'1'              INCREASE IT BY ONE
         ST    R3,CONCATNO           SAVE CONCAT. NUMBER
         CVD   R3,TEMP               CONVERT TO DECIMAL
         LA    R1,SDDNME+7
         MVC   SDDNME(8),=X'4020202020202120'
         EDMK  SDDNME(8),TEMP+4
         BCTR  R1,R0
         MVI   0(R1),C'+'            INSERT PLUS SIGN
         MVC   SDDNME(4),=C'CCAT'    INDICATE BACK REFERENCE
EXCP02   BR    R7                    RETURN TO CALLER
         SPACE 2
         DROP  R2
***********************************************************************
*  CONVERT AND PLACE TPUTS AND TGETS IN PRINT LINE                    *
***********************************************************************
         SPACE 2
LOOP4    CLI   SMF30UON+1,X'01'    UNIT RECORD SEGMENT PRESENT
         BL    CNTDONE             NO BYPASS INFORMATION
         LR    R15,R9              GET SMF RECORD ADDRESS
         A     R15,SMF30UOF        UNIT RECORD SEGMENT OFFSET
         LR    R2,R15              GET ADDRESSABILITY
         USING SMF30URA,R2         ESTABLISH ADDRESSABILITY
         LA    R4,2                NUMBER OF FIELDS TO PRINT
         MVC   TEMP(4),SMF30TPT    GET TPUTS COUNT
         MVC   SDDNME,=C'TPUTS   '
LOOP5    EQU   *
         USING S4,R6
         L     R3,TEMP                AND CONVERT IT
         CVD   R3,TEMP                   TO DECIMAL
         MVC   SCOUNT-1(8),=X'4020202020202120'
         ED    SCOUNT-1(8),TEMP+4
         CLC   TEMP(4),BINZERO     ENTRY ZERO
         BNE   LOOP05A             NO
         CLI   SUPSW,X'00'         SUPPRESSION ON
         BNE   LOOP05A             NO
         BCT   R4,LOOP5A           YES CONTINUE
         MVI   0(R6),C' '
         MVC   1(16,R6),0(R6)      CLEAR LAST ENTRY
         B     CNTDONE
LOOP05A  LA    R6,17(R6)           NEXT POSITION IN PRINT LINE
         BCT   R4,*+8              BR AROUND EXIT TIL DONE
         B     CNTDONE             EXIT WHEN R4 IS ZERO
         BCT   R5,LOOP5A           DO ENTRIES UNTIL 7  IS REACHED
         LR    R5,R2               SAVE R2 FROM PUTLINE
         BAS   R7,PUTLINE          PUT OUT THIS ONE
         LR    R2,R5               RESTORE R2
         B     LOOP6               GO START ANOTHER LINE
LOOP5A   EQU   *
         MVC   TEMP(4),SMF30TGT    GET TGETS COUNT
         MVC   SDDNME,=C'TGETS   '
         B     LOOP5
LOOP6    EQU   *
         LA    R6,PRTLINE+4        GET ADDR OF FIRST PRINT AREA
         MVC   PRTLINE,BASELINE
         B     LOOP5A
         SPACE 2
         DROP  R2
CNTDONE  EQU   *
         BAS   R7,PUTLINE          LAST OF THE EXCP I/O COUNTS LINE
         MVC   PRTLINE,BASELINE    SET UP A SEPARATOR LINE
         BAS   R7,PUTLINE            AND PRINT IT
         SPACE 2
***********************************************************************
*   BUILD AND PRINT 6TH LINE (PAGING ACTIVITIES)                      *
***********************************************************************
         SPACE 2
STEPCONT EQU   *
         LA    R6,PRTLINE          GET BASE BACK
         MVC   PRTLINE,STEPLN6     SET UP PAGE STAT LINE
         SPACE 2
***********************************************************************
* TOTAL NUMBER OF DEMAND PAGE-INS AND PAGE-OUTS                       *
***********************************************************************
         SPACE 1
         CLI   SMF30RON+1,X'01'    STORAGE AND PAGING SEGMENT PRESENT
         BL    SXTHLNE             NO BYPASS INFORMATION
         LR    R15,R9              GET SMF RECORD ADDRESS
         A     R15,SMF30ROF        STORAGE AND PAGING SEGMENT OFFSET
         USING SMF30SAP,R15        ESTABLISH ADDRESSABILITY
         L     R1,SMF30PGI         NO OF PAGE INS.
         BAS   R14,PCOUNT          CONVERT TO DECIMAL
         MVC   SLN6DI(5,R6),TEMP+3 THEN TO EBCDIC
         L     R1,SMF30PGO         NO OF PAGE OUTS
         BAS   R14,PCOUNT          CONVERT TO DECIMAL
         MVC   SLN6DO(5,R6),TEMP+3 THEN TO EBCDIC
*        L     R1,SMF30REC         NO OF PAGE RECLAIMS
*        BAS   R14,PCOUNT          CONVERT TO DECIMAL
*        MVC   SLN6DR(5,R6),TEMP+3 THEN TO EBCDIC
         L     R1,SMF30VPI          NO OF VIO PAGE INS.
         BAS   R14,PCOUNT          CONVERT TO DECIMAL
         MVC   SLN6VI(5,R6),TEMP+3 THEN TO EBCDIC
         L     R1,SMF30VPO          NO OF VIO PAGE OUTS
         BAS   R14,PCOUNT          CONVERT TO DECIMAL
         MVC   SLN6VO(5,R6),TEMP+3 THEN TO EBCDIC
         L     R1,SMF30VPR          NO OF VIO PAGE RECLAIMS
         BAS   R14,PCOUNT          CONVERT TO DECIMAL
         MVC   SLN6VR(5,R6),TEMP+3 THEN TO EBCDIC
         L     R1,SMF30CPI         NO OF COMMON PAGE INS.
         S     R1,SMF30LPI         REMOVE LPA TO GET CSA
         BAS   R14,PCOUNT          CONVERT TO DECIMAL
         MVC   SLN6CI(5,R6),TEMP+3 THEN TO EBCDIC
*        L     R1,SMF30CPR          NO OF COMMON AREA PAGE RECLAIMS
*        S     R1,SMF30LPR         REMOVE LPA TO GET CSA
*        BAS   R14,PCOUNT          CONVERT TO DECIMAL
*        MVC   SLN6CR(5,R6),TEMP+3 THEN TO EBCDIC
         L     R1,SMF30LPI         NO OF LPA PAGE INS
         BAS   R14,PCOUNT          CONVERT TO DECIMAL
         MVC   SLN6LI(5,R6),TEMP+3 THEN TO EBCDIC
*        L     R1,SMF30LPR         NO OF LPA PAGE RECLAIMS
*        BAS   R14,PCOUNT          CONVERT TO DECIMAL
*        MVC   SLN6LR(5,R6),TEMP+3 THEN TO EBCDIC
         DROP  R15
SXTHLNE  BAS   R7,PUTLINE          GO PRINT THE PAGING ACTIVITIES
         SPACE 2
         MVC   PRTLINE,BASELINE    SET UP A SEPARATOR LINE
         BAS   R7,PUTLINE            AND PRINT IT
         SPACE 2
***********************************************************************
* BUILD AND PRINT SEVENTH LINE                                        *
***********************************************************************
         SPACE 2
         LA    R6,PRTLINE          GET BASE BACK
         MVC   PRTLINE,STEPLN7     SET UP PAGE STAT LINE
         SPACE 2
***********************************************************************
* OPERATOR INFORMATION                                                *
***********************************************************************
         SPACE 1
         CLI   SMF30OON+1,X'01'    OPERATOR SEGMENT PRESENT
         BL    SVTHLNE1            NO BYPASS INFORMATION
         LR    R15,R9              GET SMF RECORD ADDRESS
         A     R15,SMF30OOF        OPERATOR SEGMENT OFFSET
         USING SMF30OPS,R15          ESTABLISH ADDRESSABILITY
         L     R1,SMF30PDM           NO OF NON-SPECIFIC DASD MOUNTS
         BAS   R14,PCOUNT            CONVERT TO DECIMAL
         MVC   SLN7NSDM(5,R6),TEMP+3 THEN TO EBCDIC
         L     R1,SMF30PRD           NO OF SPECIFIC DASD MOUNTS
         BAS   R14,PCOUNT            CONVERT TO DECIMAL
         MVC   SLN7SDM(5,R6),TEMP+3  THEN TO EBCDIC
         L     R1,SMF30PTM           NO OF NON-SPECIFIC TAPE MOUNTS
         BAS   R14,PCOUNT            CONVERT TO DECIMAL
         MVC   SLN7NSTM(5,R6),TEMP+3 THEN TO EBCDIC
         L     R1,SMF30TPR           NO OF SPECIFIC TAPE MOUNTS
         BAS   R14,PCOUNT            CONVERT TO DECIMAL
         MVC   SLN7STM(5,R6),TEMP+3  THEN TO EBCDIC
         L     R1,SMF30MTM           NO OF NON-SPECIFIC MSS MOUNTS
         BAS   R14,PCOUNT            CONVERT TO DECIMAL
         MVC   SLN7NSMS(5,R6),TEMP+3 THEN TO EBCDIC
         L     R1,SMF30MSR           NO OF SPECIFIC MSS MOUNTS
         BAS   R14,PCOUNT            CONVERT TO DECIMAL
         MVC   SLN7SMS(5,R6),TEMP+3  THEN TO EBCDIC
         DROP  R15
SVTHLNE1 CLI   SMF30PON+1,X'01'      PERFORMANCE SEGMENT PRESENT
         BL    SVTHLNE               NO BYPASS INFORMATION
         LR    R15,R9                 GET SMF RECORD ADDRESS
         A     R15,SMF30POF          PERFORMANCE SEGMENT OFFSET
         USING SMF30PRF,R15          ESTABLISH ADDRESSABILITY
         L     R1,SMF30TRS           NO OF TRANACTIONS
         BAS   R14,PCOUNT             CONVERT TO DECIMAL
         MVC   SLN7TRNS(5,R6),TEMP+3  THEN TO EBCDIC
         DROP  R15
SVTHLNE  BAS   R7,PUTLINE          GO PRINT THE PAGING ACTIVITIES
         B     EXIT
         TITLE 'JOB END PROCESSING'
***********************************************************************
*                                                                     *
*      JOB END PROCESSING                                             *
*                                                                     *
***********************************************************************
         SPACE 2
JOBEND   EQU   *
         MVI   PRTLINE,C' '        SET UP CLEAR
         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE
         BAS   R7,PUTLINE          BLANK LINE
         MVC   PRTLINE,BASELINE    SET UP ROW OF *'S
         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE
         LA    R1,PRTLINE+46       LOAD ADDRESS FOR HEADER GEN
         BAS   R7,HDRSETP          GO SET UP HEADER
CKUSER2  BAS   R7,PUTLINE                           AND GO PRINT IT
         MVC   PRTLINE,BASELINE                     SET UP A SEPARATOR
         BAS   R7,PUTLINE                           LINE AND PRINT
         SPACE 2
***********************************************************************
*  BUILD AND PRINT JOB END HEADERS                                    *
***********************************************************************
         SPACE 2
         USING SH1,R6
         LA    R6,PRTLINE
         MVC   SHEAD1(L'USERID),USERID     USER IDENTIFICATION
         L     R15,16               GET CVT POINTER
         LA    R7,24                RELOCATION FACTOR
         SR    R15,R7
         CLC   0(8,R15),BINZERO     CHECK FOR ZEROS
         BE    *+10
         MVC   SHEAD1A(16),0(R15)             USER SYSTEM DESC.
         MVC   SHEAD1J,IPJOB               JOB END IDENTIFICATION
         MVC   SHEAD1PH,PROGMER                PROGRAMMER'S
         L     R7,PARMPROG                    NAME
         MVC   SHEAD1PR(20),0(R7)
         BAS   R7,PUTLINE                  PRINT THE JOB END HEADING
         MVC   PRTLINE,BASELINE            SET UP A SEPARATOR LINE
         BAS   R7,PUTLINE                     AND PRINT IT
         SPACE 2
***********************************************************************
* BUILD AND PRINT THE 1ST JOB LINE                                    *
***********************************************************************
         SPACE 2
         USING J1,R6
         MVC   PRTLINE,JOBLN1      PUT UP JOBNAME
         CLI   SMF30ION+1,X'01'     IDENTIFICATION SEGMENT PRESENT
         BL    JOBEND1              NO BYPASS INFORMATION
         LR    R15,R9                         SMF RECORD ADDRESS
         A     R15,SMF30IOF              IDENTIFICATION SEGMENT OFFSET
         USING SMF30ID,R15              ESTABLISH ADDRESSABILITY
         MVC   JNM,SMF30JBN           INTO LINE
         MVC   TIME,SMF30RSD        RDR START DATE
         LA    R5,JRDDT            PLACE IN LINE
         BAL   R7,DAYS             GO DO IT
         MVC   TIME,SMF30STD        INIT DATE
         LA    R5,JINITDT          PLACE IN LINE
         BAL   R7,DAYS             PUT IT THERE
         MVC   DATE,SMF30STD        GET START DATE
         MVC   TIME,SMF30SIT        STRT TIME
         BAL   R7,GETTIME          GO AND GET DATE/TIME
         LA    R5,JELAPSTM         GET ELAPSED TIME'S PRINT POSITION
         BAL   R7,ELAPSED          GO WORK OUT ELAPSED TIME
JOBEND1  BAS   R7,PUTLINE          GO PRINT THE LINE
         DROP  R15
         SPACE 2
***********************************************************************
* BUILD AND PRINT 2ND JOB END LINE                                    *
***********************************************************************
         SPACE 2
         USING J2,R6
         MVC   PRTLINE,JOBLN2
         CLI   SMF30ION+1,X'01'       IDENTIFICATION SEGMENT PRESENT
         BL    JOBEND2A               NO BYPASS INFORMATION
         LR    R15,R9                         SMF RECORD ADDRESS
         A     R15,SMF30IOF              IDENTIFICATION SEGMENT OFFSET
         USING SMF30ID,R15              ESTABLISH ADDRESSABILITY
         MVC   JCLASS,SMF30CLS      GET JOB CLASS
         MVC   TIME,SMF30RST        READ  TIME
         LA    R5,JRDTM            LOCATE PRINT POSITION
         BAL   R7,TIMEX            GO CONVERT TIME TO HH:MM:SS:
         MVC   TIME,SMF30SIT        GET INIT TIME
         LA    R5,JINITTM          LOCATE ITS PRINT POSITION
         BAL   R7,TIMEX            GO CONVERT TO HH:MM:SS
         DROP  R15
JOBEND2A CLI   SMF30CON+1,X'01'    PROCESSOR ACCOUNTING SEGMENT PRESENT
         BL    JOBEND2               NO BYPASS INFORMATION
         LR    R15,R9                         SMF RECORD ADDRESS
         A     R15,SMF30COF        PROCESSOR ACCOUNTING SEGMENT OFFSET
         USING SMF30CAS,R15              ESTABLISH ADDRESSABILITY
         MVC   TIME,SMF30CPT       GET JOB CPU TIME
         DROP  R15
         LA    R5,JCPUTM           PLACE IN LINE
         BAL   R7,TIMEX1           PUT IT INTO LINE
JOBEND2  BAS   R7,PUTLINE
         SPACE 2
***********************************************************************
* BUILD AND PRINT 3RD JOB END LINE                                    *
***********************************************************************
         SPACE 2
         USING J3,R6
         MVC   PRTLINE,JOBLN3
         MVC   JSUBS,SMF30WID        SUBSYSTEM IDENTIFIER
         CLI   SMF30ION+1,X'01'     IDENTIFICATION SEGMENT PRESENT
         BL    JOBEND3A             NO BYPASS INFORMATION
         LR    R15,R9                         SMF RECORD ADDRESS
         A     R15,SMF30IOF              IDENTIFICATION SEGMENT OFFSET
         USING SMF30ID,R15              ESTABLISH ADDRESSABILITY
         MVC   DATE,SMF30RSD        RDR START DATE
         MVC   TIME,SMF30RST        RDR START TIME
         DROP  R15
         BAL   R7,GETTIME          GO AND GET DATE/TIME
         LA    R5,JSYSTM           PLACE INTO LINE
         BAL   R7,ELAPSED          GET DIFFERENCE
JOBEND3A L     R0,TIMEND             GET JOB END TIME IN 0.01 OF SEC
         ST    R0,TIME
         LA    R5,JENDTM           GET PLACE IN LINE
         BAL   R7,TIMEX            PUT IT THERE
         CLI   SMF30CON+1,X'01'    PROCESSOR ACCOUNTING SEGMENT PRESENT
         BL    JOBEND3               NO BYPASS INFORMATION
         LR    R15,R9                         SMF RECORD ADDRESS
         A     R15,SMF30COF        PROCESSOR ACCOUNTING SEGMENT OFFSET
         USING SMF30CAS,R15              ESTABLISH ADDRESSABILITY
         MVC   TIME,SMF30CPS       GET JOB SRB TIME
         DROP  R15
         LA    R5,JSRBTM           PLACE IN LINE
         BAL   R7,TIMEX1           PUT IT INTO LINE
JOBEND3  BAS   R7,PUTLINE
         SPACE 2
***********************************************************************
* ISSUE APPROPRIATE WTO MESSAGE FOR JOB COMPLETION                    *
***********************************************************************
         SPACE 2
         CLI   SMF30TON+1,X'01'    COMPLETION SEGMENT PRESENT?
         BL    EXIT                NO, DONT ISSUE WTO
         LR    R15,R9              SMF RECORD ADDRESS
         A     R15,SMF30TOF        COMPLETION SEGMENT OFFSET
         USING SMF30CMP,R15           ESTABLISH ADDRESSABILITY
         TM    SMF30STI,X'01'      WAS JOB FLUSHED?
         BO    EXIT                YES, DONT ISSUE MESSAGE
         TM    SMF30STI,X'02'      DID JOB ABEND?
         BO    JOBABND             YES, GO HANDLE JOB ABEND STUFF
         LH    R2,SMF30SCC         HANDLE STEP COMPLETION CODE
         LTR   R2,R2               IS COMPLETION CODE ZERO?
         BZ    EXIT                YES, DONT ISSUE MESSAGE
         MVC   WTOANP03(WTO03END-WTOSTC03),WTOSTC03
         CVD   R2,TEMP             *
         MVC   ANP03JCC,=X'40202120'
         ED    ANP03JCC,TEMP+6
         CLI   SMF30ION+1,X'01'    IDENTIFICATION SEGMENT PRESENT?
         BL    EXIT                NO, DONT ISSUE WTO
         LR    R1,R9                          SMF RECORD ADDRESS
         A     R1,SMF30IOF              IDENTIFICATION SEGMENT OFFSET
         USING SMF30ID,R1               ESTABLISH ADDRESSABILITY
         CLI   SMF30CLS,C' '       IS THIS A BATCH JOB?
         BE    EXIT                NO, DONT ISSUE WTO
         MVC   ANP03JBN,SMF30JBN   MOVE IN JOB NAME
         DROP  R1
         LA    R1,WTOANP03         LOAD ADDRESS OF PARM LIST
         WTO   MF=(E,(1))          ISSUE MESSAGE
         B     EXIT
JOBABND  MVC   WTOANP04(WTO04END-WTOSTC04),WTOSTC04
         LR    R1,R9                          SMF RECORD ADDRESS
         A     R1,SMF30IOF              IDENTIFICATION SEGMENT OFFSET
         USING SMF30ID,R1               ESTABLISH ADDRESSABILITY
         MVC   ANP04JBN,SMF30JBN   MOVE IN JOB NAME
         DROP  R1
         TM    SMF30SCC,X'80'       USER ABEND ??
         BZ    JBSABEND            NO SYSTEM ABEND
         MVC   ANP04UAT,=C'USER  '
         LH    R2,SMF30SCC
         N     R2,=A(X'FFF')       TURN OFF FLAGS
         CVD   R2,TEMP
         MVC   ANP04UAB,=X'402120202020'
         ED    ANP04UAB,TEMP+5
         B     JOBEWTO
JBSABEND UNPK  TEMP(5),SMF30SCC(3)  DISPLAY SYSTEM CODE IN HEX
         MVC   ANP04SAT,=C'SYSTEM'
         TR    TEMP+1(3),TOHEX-C'0'
         MVC   ANP04SAB,TEMP+1
         MVC   ANP04SBL,=C'   '
JOBEWTO  DS    0H
         CLI   SMF30ION+1,X'01'     IS ID SECTION PRESENT?
         BL    EXIT                 NO, SKIP MESSAGE
         LR    R15,R9
         A     R15,SMF30IOF
         USING SMF30ID,R15
         CLI   SMF30CLS,C' '        IS THIS A BATCH JOB?
         BE    EXIT                 NO, SKIP PRINTING MESSAGE
         LA    R1,WTOANP04
         WTO   MF=(E,(1))
         DROP  R15
         TITLE 'IEFACTRT EXITS'
         SPACE 2
EXIT     EQU   *
         MVC   PRTLINE,BASELINE
         BAS   R7,PUTLINE
         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE
         BAS   R7,PUTLINE
         MVI   PRTLINE,C' '        CLEAR FOR BLANK LINE
         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE
         BAS   R7,PUTLINE
         SPACE 2
EXIT1    CLC   R0SAVE,=F'00123456'
         BNE   EXIT2               NO, DON'T DO CLOSE
         MVC   CLOSEL(CLOSLDCE-CLOSELDC),CLOSELDC    SET UP CLOSE LIST
         CLOSE (SYSPRINT,DISP),MF=(E,CLOSEL)
***********************************************************************
* FREE DYNAMIC WORKAREAS                                              *
***********************************************************************
         SPACE 2
EXIT2    L     R13,4(R13)          RELOAD OS SAVEAREA
         LR    R1,R8               AREA TO BE FREED
         FREEMAIN R,A=(1),LV=WORKEND-WORKSTRT
         SPACE 2
RETURN   EQU   *
         LM    R14,R12,12(R13)     RESTORE OS REGISTERS
         SR    R1,R1               ALLOW SMF RECORD TO BE WRITTEN
         SR    R15,R15             DON'T CANCEL JOB
         BR    R14
         TITLE 'IEFACTRT SUBROUTINES'
         SPACE 2
***********************************************************************
*                                                                     *
*  COUNT CONVERSION ROUTINE: CONVERTS BINARY TO BINARY- OR DECIMAL-   *
*   ORIENTED CHARACTER OUTPUT (PCOUNT SCALES 1K = 1000, 1M=1000000,   *
*   WHILE HCOUNT SCALES 1K = 1024, 1M = 1048576)                      *
*        INPUT   REG 1 HAS COUNT TO BE CONVERTED                      *
*        OUTPUT  TEMP  CONTAINS CHARACTER OUTPUT FIELD                *
*                                                                     *
***********************************************************************
HCOUNT   C     R1,=F'1023488'      SHOULD WE SCALE IN MEGS (2 ** 20)?
         BL    HCOUNT1             NO
         MVI   TEMP+7,C'M'         MOVE IN 'M' FOR MEGS (2 ** 20)
         SRA   R1,19               SHIFT RIGHT 19 BITS
         AH    R1,=H'1'            ADD ONE FOR ROUNDING
         MH    R1,=H'5'            MULT BY FIVE (FOR ROUNDING AND 'M')
         B     HCOUNT3
HCOUNT1  C     R1,=F'9995'         SHOULD WE SCALE IN K'S (2 ** 10)?
         BL    HCOUNT2             NO
         MVI   TEMP+7,C'K'         MOVE IN 'K' FOR K'S (2 ** 10)
         SRA   R1,9                SHIFT RIGHT 9 BITS
         AH    R1,=H'1'            ADD ONE FOR ROUNDING
         MH    R1,=H'5'            MULT BY FIVE (FOR ROUNDING AND 'K')
         B     HCOUNT3
HCOUNT2  MVI   TEMP+7,X'20'        DO NOT SCALE
HCOUNT3  CVD   R1,TEMP1
         B     CNTCOMM
PCOUNT   CVD   R1,TEMP1            CONVERT TO DECIMAL
         CP    TEMP1,=P'999500'    SHOULD WE SCALE IN MILLIONS?
         BL    PCOUNT1             NO
         MVI   TEMP+7,C'M'         MOVE IN 'M' FOR MILLIONS
         SRP   TEMP1,64-6,5        SHIFT AND ROUND RIGHT
         SRP   TEMP1,1,0           SHIFT LEFT (FOR 'M')
         B     CNTCOMM
PCOUNT1  CP    TEMP1,=P'9995'      SHOULD WE SCALE IN THOUSANDS?
         BL    PCOUNT2             NO
         MVI   TEMP+7,C'K'         MOVE IN 'K' FOR THOUSANDS
         SRP   TEMP1,64-3,5        SHIFT AND ROUND RIGHT
         SRP   TEMP1,1,0           SHIFT LEFT (FOR 'K')
         B     CNTCOMM
PCOUNT2  MVI   TEMP+7,X'20'        DO NOT SCALE
CNTCOMM  MVC   TEMP(7),=X'40202020202021'
         LA    R1,TEMP1+4
         ED    TEMP(8),0(R1)       MOVE IN UNFLOATED COUNT
         BR    R14
         SPACE 2
***********************************************************************
*                                                                     *
*  CONVERT PACKED DATE TO EBCDIC FORMAT                               *
*                                                                     *
***********************************************************************
         SPACE 2
DAYS     EQU   *
         UNPK  1(5,R5),TIME+1(3)   PUT EBCDIC INTO FIELD
         OI    5(R5),F0            MAKE IT PRINTABLE
         MVC   0(2,R5),1(R5)       SEPARATE
         MVI   2(R5),DOT           SEPARATOR
         BR    R7                  RETURN
         EJECT
***********************************************************************
*                                                                     *
*  THIS ROUTINE CALCULATES THE ELAPSED TIME WHICH IS THE DIFFERENCE   *
*                     BETWEEN TWO BINARY TIME                         *
*                                                                     *
***********************************************************************
         SPACE 2
ELAPSED  EQU   *
         L     R2,TIME             GET BEGIN TIME
         L     R3,TIMEND           GET END
         CP    DATE+2(2),DATEND+2(2)  SAME DAY?
         BNL   *+18          YES, GO AROUND ADD ON
         AP    DATE+2(2),=P'1'   ADD ON 1 DAY
         A     R3,ONEDAY     AND 24 HOURS TO TIME
         B     *-20          TRY FOR MATCH AGAIN
         SR    R3,R2               GET DIFFERENCE
         ST    R3,TIME             SAVE
         B     TIMEX               FALL INTO TIME CONVERSION
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*          THIS ROUTINE GETS THE TIME AND DATE AND STORES             *
*                                                                     *
*               THEM AT TIMEND AND DATEND RESPECTIVELY                *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
GETTIME  CLC   R0SAVE,=F'00123456'   BATCH TEST?
         BNE   GETTIME1             NO GO ISSUE TIME
         MVC   TIMEND,SMF30TME    MOVE TIME
         MVC   DATEND,SMF30DTE    MOVE DATE
         BR    R7                 RETURN
GETTIME1 TIME  BIN
         ST    R0,TIMEND               SAVE TIME
         ST    R1,DATEND               SAVE DATE
         BR    R7                      RETURN
***********************************************************************
*                                                                     *
*    THIS ROUTINE TRANSLATES  BINARY TIME TO HH:MM:SS FORMAT          *
*                                                                     *
***********************************************************************
         SPACE 2
TIMEX1   EQU   *
         MVI   8(R5),DOT           INITIALIZE SEPARATOR
         L     R3,TIME             LOAD TIME
         LA    R4,100              GET DIVISOR
         SR    R2,R2               CLEAR HIGH ORDER
         DR    R2,R4               R2 NOW HAS HUNDRETHS OF SECS
         CVD   R2,TEMP             CONVERT TO EBCDIC
         UNPK  9(2,R5),TEMP        *
         OI    10(R5),F0           *
         B     TIMEX               CONTINUE WITH REST OF FIELD
         SPACE 2
TIMEX2   EQU   *
         SR    R2,R2               CLEAR REGISTER 2
         L     R3,TIME             LOAD TIME IN 1024 MICROSEC. UNITS
         M     R2,=F'1024'         MULTIPLY BE 1024
         D     R2,=F'1000000'      DIVIDE BY 1 MILLION R3 NOW HAS SECS
         MVI   2(R5),COLON          INITIALIZE SEPARATORS
         MVI   5(R5),COLON         *
         B     TIMEX0               CONTINUE WITH FIELD CONVERSION
         SPACE 2
TIMEX    EQU   *
         MVI   2(R5),COLON         INITIALIZE SEPARATORS
         MVI   5(R5),COLON
         L     R3,TIME             LOAD TIME
         LA    R4,100              GET DIVISOR
         SR    R2,R2               CLEAR HIGH ORDER
         DR    R2,R4               R3 NOW IN SECONDS
TIMEX0   SR    R2,R2               CLEAR
         LA    R4,60               60 SECS/MIN
         DR    R2,R4               R2 HAS SECS, R3 HAS BALANCE
         CVD   R2,TEMP             CONVERT SECS TO EBCDIC
         UNPK  6(2,R5),TEMP        *
         OI    7(R5),F0            *
         SR    R2,R2               CLEAR AGAIN
         DR    R2,R4               R2 HAS MINUTES,R3 HAS HOURS
         CVD   R2,TEMP             CONVERT MINUTES TO EBCDIC
         UNPK  3(2,R5),TEMP        *
         OI    4(R5),F0            *
         CVD   R3,TEMP             CONVERT HOURS
         UNPK  0(2,R5),TEMP        *
         OI    1(R5),F0            *
         BR    R7                  RETURN
         EJECT
***********************************************************************
*                                                                     *
*     THIS ROUTINE INTERFACES WITH SYSOUT WRITER TO PRINT A LINE      *
*            SEE SMF MANUAL FOR LINKAGE CONVENTIONS                   *
*                                                                     *
***********************************************************************
         SPACE 2
PUTLINE  EQU   *
         CLC   R0SAVE,=F'00123456'
         BNE   PUTLINE1            NO, DON'T DO PUT
         PUT   SYSPRINT,PRTLINE
         BR    R7                 RETURN
PUTLINE1 ST    R12,R12SAVE2        SAVE BASE ADDRESS
         L     R12,R12SAVE         RESTORE PARMS
         LA    R2,PRTLINE          FOLLOW IEFYS CONVENTIONS
         ST    R2,36(R12)          SEE SMF MANUAL
         LA    R2,130              IEFACTRT CODING INSTRUCTIONS
         STH   R2,42(R12)          *
         L     R15,VIEFYS          GET IEFYS ADDR
         BALR  R14,R15             GO PUT LINE
         L     R12,R12SAVE2        RESTORE BASE ADDRESS
         BR    R7                  RETURN TO CALLER
         EJECT
***********************************************************************
* SET UP COMMON HEADING LINE:                                         *
*  OS/SPXXXXXX FMIDXXX CPU MODEL XXXX                                 *
***********************************************************************
         SPACE 2
HDRSETP  MVC   0(37,R1),RELSTAT    MOVE IN STATIC INFORMATION FOR HDR
         USING RELDYN,R1           ADDRESS WORK AREA FOR HEADER LINE
         L     R15,16              GET CVT POINTER
         LA    R4,40               RELOCATION FACTOR
         SR    R15,R4              ADDRESS CVT PREFIX
         SLR   R4,R4               CLEAR OUT R7
         ICM   R4,3,34(R15)        INSERT MODEL # INTO REGISTER
         SLL   R4,4                SHIFT FOR SIGN
         STCM  R4,7,TEMP1          STORE INTO TEMP1 FOR UNPACK
         OI    TEMP1+2,X'0F'       INSERT SIGN FOR UNPACK
         UNPK  MODEL(4),TEMP1(3)
         MVC   SPREL(8),0(R15)     MOVE IN CONTROL PROG PROD NAME
         MVC   FMID(8),8(R15)      MOVE IN CONTROL PROG FMID NAME
         BR    R7                  RETURN TO CALLER
         DROP  R1
         TITLE 'IEFACTRT CONSTANTS'
***********************************************************************
*                                                                     *
*              DATA  CONSTANTS                                        *
*                                                                     *
***********************************************************************
         SPACE 2
SYSPRTDC DCB   MACRF=PM,LRECL=130,DSORG=PS,BLKSIZE=130,                X
               RECFM=F,DDNAME=SYSPRINT
SYSPRTED EQU   *
OPENLDC  OPEN  (,(OUTPUT)),MF=L
OPENLDCE EQU   *
CLOSELDC CLOSE (,DISP),MF=L
CLOSLDCE EQU   *
WTOSTC02 WTO   'ANP002I JOB XXXXXXXX STEP ZZZ (CCCCCCCC) XXXXXX ABEND CX
               ODE 999999',ROUTCDE=(11),MF=L
WTO02END EQU   *
WTOSTC03 WTO   'ANP003I JOB XXXXXXXX HIGHEST NON-ZERO COMPLETION CODE WX
               AS 999',ROUTCDE=(11),MF=L
WTO03END EQU   *
WTOSTC04 WTO   'ANP004I JOB XXXXXXXX XXXXXX ABEND CODE 999999',        X
               ROUTCDE=(11),MF=L
WTO04END EQU   *
R30STEP  DC    H'4'                  STEP TERMINATION
R30JOB   DC    H'5'                  JOB TERMINATION
VIEFYS   DC    V(IEFYS)
ONEDAY   DC    A(24*60*60*100)
HEXTRAN  DC    C'0123456789ABCDEF'
BASELINE DC    C'*',CL128' ',C'*'
USERID   DC    C'IBM SYSTEM OS/MVS '
IPSTEP   DC    C'STATISTICS FOR STEP'
IPJOB    DC    C'JOB  END STATISTICS'
PROGMER  DC    C'PROGRAMMER'
EXCPSTAT DC    C'EXCP STATISTICS'
BINZERO  DC    8X'00'
         LTORG
RELSTAT  DS    0CL37
         DC    C' OS/'
         DC    C'        '
         DC    C' '
         DC    C'        '
         DC    C' CPU MODEL '
         DC    C'    '
         DC    C' '
CONDLINE DC    C'STEP COND-CODE'
         SPACE 3
STEPLN1  DS    0CL130
         DC    C'*  PROGRAM NAME     '
SLN1P    EQU   *-STEPLN1,8         PROGRAM NAME
         DC    C'        ',C'  '
         DC    C'  STEP INIT TIME  '
SLN1I    EQU   *-STEPLN1,8         STEP INITIATION TIME
         DC    C'        '
         DC    C'  TASK CPU TIME '
SLN1TC   EQU   *-STEPLN1,11        TASK CPU TIME
         DC    C'           '
         DC    C'  TOTAL SERVICE  '
SLN1TOTS EQU   *-STEPLN1,8         TOTAL SERVICE
         DC    C'     '
         DC    C'  TCB SERVICE   '
SLN1TCS  EQU   *-STEPLN1,8         TCB SERVICE
         DC    C'     '
         DC    CL30' '
         ORG   STEPLN1+129
         DC    C'*'
         SPACE 3
STEPLN2  DS    0CL130
         DC    C'*  PRIVATE  '
SLN2PRBL EQU   *-STEPLN2,6         PRIVATE USE BELOW 16M
         DC    C'      ',C' / '
SLN2PRAB EQU   *-STEPLN2,6         PRIVATE USE ABOVE 16M
         DC    C'      ',C'   '
         DC    C'  STEP END TIME   '
SLN2END  EQU   *-STEPLN2,8         STEP END TIME
         DC    C'        '
         DC    C'  SRB  CPU TIME '
SLN2SRBC EQU   *-STEPLN2,11        SRB CPU TIME
         DC    C'           '
         DC    C'  SWAPS          '
SLN2SWAP EQU   *-STEPLN2,5         SWAPS (IN+OUT) FOR THIS STEP
         DC    C'     '
         DC    C'  SRB SERVICE   '
SLN2SRBS EQU   *-STEPLN2,5         SRB SERVICE UNITS
         DC    C'     '
         DC    CL30' '
         ORG   STEPLN2+129
         DC    C'*'
         SPACE 3
STEPLN3  DS    0CL130
         DC    C'*  LSQA/SWA '
SLN3SPBL EQU   *-STEPLN3,6                 SYSTEM PRIVATE BELOW 16M
         DC    C'      ',C' / '
SLN3SPAB EQU   *-STEPLN3,6                 SYSTEM PRIVATE ABOVE 16M
         DC    C'      ',C'   '
         DC    C'  ACTIVE TIME     '
SLN3AT   EQU   *-STEPLN3,8                 ACTIVE STEP TIME
         DC    C'        '
         DC    C'  PAGE SECONDS     '
SLN3PS   EQU   *-STEPLN3,8                 PAGES IN CORE * CPU SECONDS
         DC    C'        '
         DC    C'  SWAP PAGES IN  '
SLN3SPI  EQU   *-STEPLN3,5                 PAGES IN BECAUSE OF SWAPPING
         DC    C'     '
         DC    C'  I/O SERVICE   '
SLN3IOS  EQU   *-STEPLN3,5                 I/O SERVICE UNITS
         DC    C'     '
         DC    CL30' '
         ORG   STEPLN3+129
         DC    C'*'
         SPACE 3
STEPLN4  DS    0CL130
         DC    C'*  REGION SIZE       '
SLN4RG   EQU   *-STEPLN4,6                 REGION AVAILABLE
         DC    C'      ',C'   '
         DC    C'  RESIDENCY TIME  '
SLN4RT   EQU   *-STEPLN4,8
         DC    C'        '
         DC    C'  PAGES STOLEN     '
SLN4PS   EQU   *-STEPLN4,8
         DC    C'        '
         DC    C'  SWAP PAGES OUT '
SLN4SPO  EQU   *-STEPLN4,5
         DC    C'     '
         DC    C'  MSO SERVICE   '
SLN4MSO  EQU   *-STEPLN4,5
         DC    C'     '
         DC    CL30' '
         ORG   STEPLN4+129
         DC    C'*'
         SPACE 2
STEPLN6  DS    0CL130
         DC    C'*  ',C'PAGING: '
         DC    C'DEMAND'
         DC    C' IN ',C'     '
SLN6DI   EQU   *-5-STEPLN6,5
         DC    C' OUT ',C'     '
SLN6DO   EQU   *-5-STEPLN6,5
*        DC    C' RLM ',C'     '
         DC    C'     ',C'     '
SLN6DR   EQU   *-5-STEPLN6
         DC    C'  VIO'
         DC    C' IN ',C'     '
SLN6VI   EQU   *-5-STEPLN6,5
         DC    C' OUT ',C'     '
SLN6VO   EQU   *-5-STEPLN6,5
         DC    C' RLM ',C'     '
SLN6VR   EQU   *-5-STEPLN6
         DC    C'  CSA'
         DC    C' IN ',C'     '
SLN6CI   EQU   *-5-STEPLN6,5
*        DC    C' RLM ',C'     '
         DC    C'     ',C'     '
SLN6CR   EQU   *-5-STEPLN6,5
         DC    C'  LPA'
         DC    C' IN ',C'     '
SLN6LI   EQU   *-5-STEPLN6,5
*        DC    C' RLM ',C'     '
         DC    C'     ',C'     '
SLN6LR   EQU   *-5-STEPLN6,5
         DC    CL32' '
         ORG   STEPLN6+129
         DC    C'*'
         SPACE 2
STEPLN7  DS    0CL130
         DC    C'*  ',C'MOUNTS: '
         DC    C'DASD ',C'NON-'
         DC    C'SPEC. ',C'     '
SLN7NSDM EQU   *-5-STEPLN7,5
         DC    C' SPEC. ',C'     '
SLN7SDM  EQU   *-5-STEPLN7,5
         DC    C' TAPE ',C'NON-'
         DC    C'SPEC. ',C'     '
SLN7NSTM EQU   *-5-STEPLN7
         DC    C' SPEC. ',C'     '
SLN7STM  EQU   *-5-STEPLN7,5
         DC    C' MSS ',C'NON-'
         DC    C'SPEC. ',C'     '
SLN7NSMS EQU   *-5-STEPLN7,5
         DC    C' SPEC. ',C'     '
SLN7SMS  EQU   *-5-STEPLN7
         DC    C'  TRANSACTIONS ',C'     '
SLN7TRNS EQU   *-5-STEPLN7
         DC    CL32' '
         ORG   STEPLN7+129
         DC    C'*'
         SPACE 3
JOBLN1   DS    0CL130
         DC    C'*   ',C'JOB NAME   '
         DC    CL8' ',CL3' ',C'JOB READ DATE  '
         DC    C'      ',CL8' ',C'JOB INIT DATE  '
         DC    C'      ',CL8' ',C'JOB ELAPSED TIME  '
         DC    C'        ',CL132' '
         ORG   JOBLN1+129
         DC    C'*'
         SPACE 2
JOBLN2   DS    0CL130
         DC    C'*   ',C'JOB CLASS  '
         DC    C' ',CL10' ',C'JOB READ TIME  '
         DC    C'        ',CL6' ',C'JOB INIT TIME  '
         DC    C'        ',CL6' ',C'JOB CPU TIME',CL6' '
         DC    C'           ',CL132' '
         ORG   JOBLN2+129
         DC    C'*'
         SPACE 2
JOBLN3   DS    0CL130
         DC    C'*   ',C'SUBSYSTEM  '
         DC    C'    ',CL7' ',C'TIME IN SYSTEM '
         DC    C'        ',CL6' ',C'JOB END TIME   '
         DC    C'        ',CL6' ',C'JOB SRB TIME',CL6' '
         DC    C'           ',CL132' '
         ORG   JOBLN3+129
         DC    C'*'
TOHEX    DC    C'0123456789ABCDEF' TRANSLATE TABLE FOR PRINTABLE HEX
         SPACE 2
COLON    EQU   C':'
F0       EQU   X'F0'
DOT      EQU   C'.'
VIRT     EQU   X'80'
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER EQUATES                                             *
*                                                                     *
***********************************************************************
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         TITLE 'IEFACTRT DSECTS'
*---------------------------------------------------------------------*
*                                                                     *
*        PARM LIST                                                    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
PARMS    DSECT
PARMEPRM DS    F                PTR TO COMMON EXIT PARAMETER AREA
PARMSTEP DS    F                PTR TO STEPNAME FIELD
PARMPROG DS    F                PTR TO PROGRAMMER NAME FIELD
PARMJOBC DS    F                PTR TO JOB CPU TIME FIELD
PARMACCT DS    F                PTR TO JOB ACCOUNTING FIELDS
PARMSTPC DS    F                PTR TO STEP CPU TIME FIELD
PARMSACT DS    F                PTR TO STEP ACCOUNTING FIELDS
PARMINDC DS    F                PTR TO CANCEL FLAG & STEP NUMBER
PARMCOND DS    F                PTR TO CONDITION CODE FIELD
PARMRECD DS    F                PTR TO SMF RECORD TO BE WRITTEN
         SPACE 2
***********************************************************************
*                                                                     *
*       DYNAMIC WORK STORAGE                                          *
*                                                                     *
***********************************************************************
         SPACE 2
WORKAREA DSECT
WORKSTRT EQU   *
TEMP     DS    D
TEMP1    DS    D
R13SAVE  DS    F
R12SAVE  DS    F
R12SAVE2 DS    F
R0SAVE   DS    F
TIME     DS    F
TIMEND   DS    F
DATE     DS    F
DATEND   DS    F
SAVEAREA DS    45F
         SPACE 2
DDNSVE   DS    CL8           DDNAME SAVE AREA
CONCATNO DS    F             CONCATENATION NUMBER ON DD STATEMENT
SUPSW    DS    C
         SPACE 2
         DS    0D
         DS    0F                 ASSURE FULLWORD/ NOT DBLWORD ALIGN
PRTLINE  DS    CL130
SYSPRINT DCB   MACRF=PM,LRECL=130,DSORG=PS,BLKSIZE=130,                X
               RECFM=F,DDNAME=SYSPRINT
OPENL    OPEN  (,(OUTPUT)),MF=L
CLOSEL   CLOSE (,DISP),MF=L
WTOANP02 WTO   'ANP002I JOB XXXXXXXX STEP ZZZ (CCCCCCCC) XXXXXX ABEND CX
               ODE 999999',ROUTCDE=(11),MF=L
ANP02JBN EQU   WTOANP02+16,8      JOB NAME OFFSET
ANP02ST# EQU   WTOANP02+29,4      STEP # OFFSET
ANP02STN EQU   WTOANP02+35,8      STEP NAME OFFSET
ANP02UAT EQU   WTOANP02+45,6      OFFSET FOR USER ABEND TEXT
ANP02UAB EQU   WTOANP02+63,6      OFFSET FOR USER ABEND CODE
ANP02SAT EQU   WTOANP02+45,6      OFFSET FOR SYSTEM ABEND TEXT
ANP02SAB EQU   WTOANP02+63,3      OFFSET FOR SYSTEM ABEND CODE
ANP02SBL EQU   WTOANP02+66,3      OFFSET FOR BLANKS IN SYSTEM ABEND
WTOANP03 WTO   'ANP003I JOB XXXXXXXX HIGHEST NON-ZERO COMPLETION CODE WX
               AS 999',ROUTCDE=(11),MF=L
ANP03JBN EQU   WTOANP03+16,8      JOB NAME OFFSET
ANP03JCC EQU   WTOANP03+61,4      JOB COMPLETION CODE
WTOANP04 WTO   'ANP004I JOB XXXXXXXX XXXXXX ABEND CODE 999999',        X
               ROUTCDE=(11),MF=L
ANP04JBN EQU   WTOANP04+16,8      JOB NAME OFFSET
ANP04UAT EQU   WTOANP04+25,6      OFFSET FOR USER ABEND TEXT
ANP04UAB EQU   WTOANP04+43,6      OFFSET FOR USER ABEND CODE
ANP04SAT EQU   WTOANP04+25,6      OFFSET FOR SYSTEM ABEND TEXT
ANP04SAB EQU   WTOANP04+43,3      OFFSET FOR SYSTEM ABEND CODE
ANP04SBL EQU   WTOANP04+46,3      OFFSET FOR BLANK IN SYSTEM ABEND
WORKEND  EQU   *
         SPACE 2
RELDYN   DSECT                    RELEASE INFORMATION
         DS    C' OS/'
SPREL    DS    C'        '
         DS    C' '
FMID     DS    C'        '
         DS    C' CPU MODEL '
MODEL    DS    C'    '
         DS    C' '
***********************************************************************
*     PRINT IMAGES FOR STEP END AND JOB END LINES                     *
***********************************************************************
         SPACE 2
SH1      DSECT
         DS    4C
SHEAD1   DS    CL18
SHEAD1A  DS    CL23
         DS    CL3
SHEAD11A DS    CL47
         DS    3C
STEPCL   DS    CL15
STEPCOND DS    CL5
STEPFLSH EQU   *-15
SHEAD1B  DS    CL13
         ORG   SHEAD11A
SHEAD1J  DS    CL19
         DS    CL17
SHEAD1PH DS    CL10
         DS    CL3
SHEAD1PR DS    CL20
         SPACE 2
SH2      DSECT
         DS    52C
SHEAD2   DS    CL15
         SPACE 2
S4       DSECT
SDDNME   DS    CL8
SCOUNT   DS    CL7
         SPACE 2
J1       DSECT
         DS    15C
JNM      DS    CL8
         DS    18C
JRDDT    DS    CL6
         DS    23C
JINITDT  DS    CL6
         DS    26C
JELAPSTM DS    CL8
         SPACE 2
J2       DSECT
         DS    15C
JCLASS   DS    C
         DS    25C
JRDTM    DS    CL8
         DS    21C
JINITTM  DS    CL8
         DS    24C
JCPUTM   DS    CL11
         SPACE 2
J3       DSECT
         DS    15C
JSUBS    DS    CL4
         DS    22C
JSYSTM   DS    CL8
         DS    21C
JENDTM   DS    CL8
         DS    24C
JSRBTM   DS    CL11
         SPACE 2
***********************************************************************
*     DATA MACRO (IFASMFR) IS DISTRIBUTED IN SYS1.AMODGEN             *
***********************************************************************
         SPACE 2
         PRINT   GEN
SMF30    DSECT
         IFASMFR 30                SMF TYPE 30 RECORD           MSEIPO4
         IEFJMR                    JMR MAPS COMMON PARAMETER AREA
         PRINT GEN
IEFACTRT CSECT
         END   IEFACTRT
//LKED.SYSLMOD DD DISP=SHR,DSN=S$.OS390.LPALIB
//LKED.AOSB3   DD DISP=SHR,DSN=STDL.OS390.R3.AOSB3
//LKED.SYSIN   DD *
  INCLUDE AOSB3(IEFTB724)
  ENTRY IEFACTRT
  NAME  IEFACTRT(R)
